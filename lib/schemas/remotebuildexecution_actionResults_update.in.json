{
    "type": "object",
    "properties": {
        "hash": {
            "required": true,
            "type": "string"
        },
        "instanceName": {
            "required": true,
            "type": "string"
        },
        "sizeBytes": {
            "required": true,
            "type": "string"
        },
        "fields": {
            "type": "string"
        },
        "key": {
            "type": "string"
        },
        "oauth_token": {
            "type": "string"
        },
        "prettyPrint": {
            "type": "boolean",
            "default": true
        },
        "quotaUser": {
            "type": "string"
        },
        "uploadType": {
            "type": "string"
        },
        "upload_protocol": {
            "type": "string"
        },
        "requestBody": {
            "description": "An ActionResult represents the result of an\nAction being run.",
            "properties": {
                "executionMetadata": {
                    "description": "The details of the execution that originally produced this result.",
                    "properties": {
                        "executionCompletedTimestamp": {
                            "description": "When the worker completed executing the action command.",
                            "format": "google-datetime",
                            "type": "string"
                        },
                        "executionStartTimestamp": {
                            "description": "When the worker started executing the action command.",
                            "format": "google-datetime",
                            "type": "string"
                        },
                        "inputFetchCompletedTimestamp": {
                            "description": "When the worker finished fetching action inputs.",
                            "format": "google-datetime",
                            "type": "string"
                        },
                        "inputFetchStartTimestamp": {
                            "description": "When the worker started fetching action inputs.",
                            "format": "google-datetime",
                            "type": "string"
                        },
                        "outputUploadCompletedTimestamp": {
                            "description": "When the worker finished uploading action outputs.",
                            "format": "google-datetime",
                            "type": "string"
                        },
                        "outputUploadStartTimestamp": {
                            "description": "When the worker started uploading action outputs.",
                            "format": "google-datetime",
                            "type": "string"
                        },
                        "queuedTimestamp": {
                            "description": "When was the action added to the queue.",
                            "format": "google-datetime",
                            "type": "string"
                        },
                        "worker": {
                            "description": "The name of the worker which ran the execution.",
                            "type": "string"
                        },
                        "workerCompletedTimestamp": {
                            "description": "When the worker completed the action, including all stages.",
                            "format": "google-datetime",
                            "type": "string"
                        },
                        "workerStartTimestamp": {
                            "description": "When the worker received the action.",
                            "format": "google-datetime",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "exitCode": {
                    "description": "The exit code of the command.",
                    "format": "int32",
                    "type": "integer"
                },
                "outputDirectories": {
                    "description": "The output directories of the action. For each output directory requested\nin the `output_directories` field of the Action, if the corresponding\ndirectory existed after the action completed, a single entry will be\npresent in the output list, which will contain the digest of a\nTree message containing the\ndirectory tree, and the path equal exactly to the corresponding Action\noutput_directories member.\n\nAs an example, suppose the Action had an output directory `a/b/dir` and the\nexecution produced the following contents in `a/b/dir`: a file named `bar`\nand a directory named `foo` with an executable file named `baz`. Then,\noutput_directory will contain (hashes shortened for readability):\n\n```json\n// OutputDirectory proto:\n{\n  path: \"a/b/dir\"\n  tree_digest: {\n    hash: \"4a73bc9d03...\",\n    size: 55\n  }\n}\n// Tree proto with hash \"4a73bc9d03...\" and size 55:\n{\n  root: {\n    files: [\n      {\n        name: \"bar\",\n        digest: {\n          hash: \"4a73bc9d03...\",\n          size: 65534\n        }\n      }\n    ],\n    directories: [\n      {\n        name: \"foo\",\n        digest: {\n          hash: \"4cf2eda940...\",\n          size: 43\n        }\n      }\n    ]\n  }\n  children : {\n    // (Directory proto with hash \"4cf2eda940...\" and size 43)\n    files: [\n      {\n        name: \"baz\",\n        digest: {\n          hash: \"b2c941073e...\",\n          size: 1294,\n        },\n        is_executable: true\n      }\n    ]\n  }\n}\n```",
                    "items": {
                        "description": "An `OutputDirectory` is the output in an `ActionResult` corresponding to a\ndirectory's full contents rather than a single file.",
                        "properties": {
                            "path": {
                                "description": "The full path of the directory relative to the working directory. The path\nseparator is a forward slash `/`. Since this is a relative path, it MUST\nNOT begin with a leading forward slash. The empty string value is allowed,\nand it denotes the entire working directory.",
                                "type": "string"
                            },
                            "treeDigest": {
                                "description": "The digest of the encoded\nTree proto containing the\ndirectory's contents.",
                                "properties": {
                                    "hash": {
                                        "description": "The hash. In the case of SHA-256, it will always be a lowercase hex string\nexactly 64 characters long.",
                                        "type": "string"
                                    },
                                    "sizeBytes": {
                                        "description": "The size of the blob, in bytes.",
                                        "format": "int64",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "outputDirectorySymlinks": {
                    "description": "The output directories of the action that are symbolic links to other\ndirectories. Those may be links to other output directories, or input\ndirectories, or even absolute paths outside of the working directory,\nif the server supports\nSymlinkAbsolutePathStrategy.ALLOWED.\nFor each output directory requested in the `output_directories` field of\nthe Action, if the directory file existed after\nthe action completed, a single entry will be present either in this field,\nor in the `output_directories` field, if the directory was not a symbolic link.\n\nIf the action does not produce the requested output, or produces a\nfile where a directory is expected or vice versa, then that output\nwill be omitted from the list. The server is free to arrange the output\nlist as desired; clients MUST NOT assume that the output list is sorted.",
                    "items": {
                        "description": "An `OutputSymlink` is similar to a\nSymlink, but it is used as an\noutput in an `ActionResult`.\n\n`OutputSymlink` is binary-compatible with `SymlinkNode`.",
                        "properties": {
                            "path": {
                                "description": "The full path of the symlink relative to the working directory, including the\nfilename. The path separator is a forward slash `/`. Since this is a\nrelative path, it MUST NOT begin with a leading forward slash.",
                                "type": "string"
                            },
                            "target": {
                                "description": "The target path of the symlink. The path separator is a forward slash `/`.\nThe target path can be relative to the parent directory of the symlink or\nit can be an absolute path starting with `/`. Support for absolute paths\ncan be checked using the Capabilities\nAPI. The canonical form forbids the substrings `/./` and `//` in the target\npath. `..` components are allowed anywhere in the target path.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "outputFileSymlinks": {
                    "description": "The output files of the action that are symbolic links to other files. Those\nmay be links to other output files, or input files, or even absolute paths\noutside of the working directory, if the server supports\nSymlinkAbsolutePathStrategy.ALLOWED.\nFor each output file requested in the `output_files` field of the Action,\nif the corresponding file existed after\nthe action completed, a single entry will be present either in this field,\nor in the `output_files` field, if the file was not a symbolic link.\n\nIf the action does not produce the requested output, or produces a\ndirectory where a regular file is expected or vice versa, then that output\nwill be omitted from the list. The server is free to arrange the output\nlist as desired; clients MUST NOT assume that the output list is sorted.",
                    "items": {
                        "description": "An `OutputSymlink` is similar to a\nSymlink, but it is used as an\noutput in an `ActionResult`.\n\n`OutputSymlink` is binary-compatible with `SymlinkNode`.",
                        "properties": {
                            "path": {
                                "description": "The full path of the symlink relative to the working directory, including the\nfilename. The path separator is a forward slash `/`. Since this is a\nrelative path, it MUST NOT begin with a leading forward slash.",
                                "type": "string"
                            },
                            "target": {
                                "description": "The target path of the symlink. The path separator is a forward slash `/`.\nThe target path can be relative to the parent directory of the symlink or\nit can be an absolute path starting with `/`. Support for absolute paths\ncan be checked using the Capabilities\nAPI. The canonical form forbids the substrings `/./` and `//` in the target\npath. `..` components are allowed anywhere in the target path.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "outputFiles": {
                    "description": "The output files of the action. For each output file requested in the\n`output_files` field of the Action, if the corresponding file existed after\nthe action completed, a single entry will be present either in this field,\nor in the output_file_symlinks field, if the file was a symbolic link to\nanother file.\n\nIf the action does not produce the requested output, or produces a\ndirectory where a regular file is expected or vice versa, then that output\nwill be omitted from the list. The server is free to arrange the output\nlist as desired; clients MUST NOT assume that the output list is sorted.",
                    "items": {
                        "description": "An `OutputFile` is similar to a\nFileNode, but it is used as an\noutput in an `ActionResult`. It allows a full file path rather than\nonly a name.\n\n`OutputFile` is binary-compatible with `FileNode`.",
                        "properties": {
                            "digest": {
                                "description": "The digest of the file's content.",
                                "properties": {
                                    "hash": {
                                        "description": "The hash. In the case of SHA-256, it will always be a lowercase hex string\nexactly 64 characters long.",
                                        "type": "string"
                                    },
                                    "sizeBytes": {
                                        "description": "The size of the blob, in bytes.",
                                        "format": "int64",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "isExecutable": {
                                "description": "True if file is executable, false otherwise.",
                                "type": "boolean"
                            },
                            "path": {
                                "description": "The full path of the file relative to the working directory, including the\nfilename. The path separator is a forward slash `/`. Since this is a\nrelative path, it MUST NOT begin with a leading forward slash.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "stderrDigest": {
                    "description": "The digest for a blob containing the standard error of the action, which\ncan be retrieved from the\nContentAddressableStorage.\nSee `stderr_raw` for when this will be set.",
                    "properties": {
                        "hash": {
                            "description": "The hash. In the case of SHA-256, it will always be a lowercase hex string\nexactly 64 characters long.",
                            "type": "string"
                        },
                        "sizeBytes": {
                            "description": "The size of the blob, in bytes.",
                            "format": "int64",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "stderrRaw": {
                    "description": "The standard error buffer of the action. The server will determine, based\non the size of the buffer, whether to return it in raw form or to return\na digest in `stderr_digest` that points to the buffer. If neither is set,\nthen the buffer is empty. The client SHOULD NOT assume it will get one of\nthe raw buffer or a digest on any given request and should be prepared to\nhandle either.",
                    "format": "byte",
                    "type": "string"
                },
                "stdoutDigest": {
                    "description": "The digest for a blob containing the standard output of the action, which\ncan be retrieved from the\nContentAddressableStorage.\nSee `stdout_raw` for when this will be set.",
                    "properties": {
                        "hash": {
                            "description": "The hash. In the case of SHA-256, it will always be a lowercase hex string\nexactly 64 characters long.",
                            "type": "string"
                        },
                        "sizeBytes": {
                            "description": "The size of the blob, in bytes.",
                            "format": "int64",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "stdoutRaw": {
                    "description": "The standard output buffer of the action. The server will determine, based\non the size of the buffer, whether to return it in raw form or to return\na digest in `stdout_digest` that points to the buffer. If neither is set,\nthen the buffer is empty. The client SHOULD NOT assume it will get one of\nthe raw buffer or a digest on any given request and should be prepared to\nhandle either.",
                    "format": "byte",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "resultsCachePolicy_priority": {
            "type": "integer"
        }
    }
}